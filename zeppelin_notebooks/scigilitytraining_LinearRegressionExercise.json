{"paragraphs":[{"text":"%md\n# Linear Regression Consulting Project\n\nCongratulations! You've been contracted by MegaShips Inc. to help them build a predictive model for some ships. \nThe company is one of the world's largest ship manufacturing companies, building ships for cruise lines all over the globe.\n\nYou've been flown to their headquarters in South Korea to help them give accurate estimates of how many crew members a ship will require.\n\nThey are currently building new ships for some customers and want you to create a model and use it to predict how many crew members the ships will need.\n\n    Description:\n    Measurements of ship size, capacity, crew, and age for 158 cruise ships.\n\n    Columns:\n    - Ship Name\n    - Cruise Line\n    - Age (as of 2013)\n    - Tonnage (1000s of tons)\n    - passengers (100s) \n    - Length (100s of feet)\n    - Cabins (100s)\n    - Passenger Density\n    - Crew (100s)\n\n    \nIt is saved in a csv file for you called \"cruise_ship_info.csv\". Your job is to create a regression model that will help predict how many crew members will be needed for future ships. The client also mentioned that they have found that particular cruise lines will differ in acceptable crew counts, so it is most likely an important feature to include in your analysis! \n\nOnce you've created the model and tested it for a quick check on how well you can expect it to perform, make sure you take a look at why it performs so well!\n","user":"anonymous","dateUpdated":"2019-02-07T18:35:06+0100","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h1>Linear Regression Consulting Project</h1>\n<p>Congratulations! You&rsquo;ve been contracted by MegaShips Inc. to help them build a predictive model for some ships.<br/>The company is one of the world&rsquo;s largest ship manufacturing companies, building ships for cruise lines all over the globe.</p>\n<p>You&rsquo;ve been flown to their headquarters in South Korea to help them give accurate estimates of how many crew members a ship will require.</p>\n<p>They are currently building new ships for some customers and want you to create a model and use it to predict how many crew members the ships will need.</p>\n<pre><code>Description:\nMeasurements of ship size, capacity, crew, and age for 158 cruise ships.\n\nColumns:\n- Ship Name\n- Cruise Line\n- Age (as of 2013)\n- Tonnage (1000s of tons)\n- passengers (100s) \n- Length (100s of feet)\n- Cabins (100s)\n- Passenger Density\n- Crew (100s)\n</code></pre>\n<p>It is saved in a csv file for you called &ldquo;cruise_ship_info.csv&rdquo;. Your job is to create a regression model that will help predict how many crew members will be needed for future ships. The client also mentioned that they have found that particular cruise lines will differ in acceptable crew counts, so it is most likely an important feature to include in your analysis! </p>\n<p>Once you&rsquo;ve created the model and tested it for a quick check on how well you can expect it to perform, make sure you take a look at why it performs so well!</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1549560111082_481576423","id":"20190207-182151_738768424","dateCreated":"2019-02-07T18:21:51+0100","dateStarted":"2019-02-07T18:35:06+0100","dateFinished":"2019-02-07T18:35:06+0100","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:102"},{"title":"Read In Data","text":"val df = (spark\n    .read\n    .option(\"header\", true)\n    .option(\"inferSchema\", true) // you do not specify this, all columns will be treated as strings\n    .csv(\"/user/zeppelin/scigilitytraining/cruise_ship_info.csv\"))\n","user":"anonymous","dateUpdated":"2019-02-07T19:35:38+0100","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala","title":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1549557173950_934875094","id":"20190207-173253_2065410112","dateCreated":"2019-02-07T17:32:53+0100","dateStarted":"2019-02-07T18:36:58+0100","dateFinished":"2019-02-07T18:41:29+0100","status":"ABORT","progressUpdateIntervalMs":500,"$$hashKey":"object:103","errorMessage":""},{"title":"Explore the Data","text":"df.printSchema()\n\ndf.show()\n\ndf.describe(df.columns:_*).show() // scala syntax to directly describe all columns... you could also print a single one with `df.describe(\"Age\").show()`)\n\ndf.groupBy(\"Cruise_line\").count().show()","user":"anonymous","dateUpdated":"2019-02-07T19:36:24+0100","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala","title":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1549562675398_-1956334038","id":"20190207-190435_1358868229","dateCreated":"2019-02-07T19:04:35+0100","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:104"},{"text":"import org.apache.spark.ml.feature.StringIndexer\n\nval indexer = (new StringIndexer()\n  .setInputCol(\"Cruise_line\")\n  .setOutputCol(\"cruise_cat\"))\n  \nval indexed = indexer.fit(df).transform(df)\n\nindexed.head(5)","user":"anonymous","dateUpdated":"2019-02-07T19:57:17+0100","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala","title":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1549561507334_859350147","id":"20190207-184507_1750906671","dateCreated":"2019-02-07T18:45:07+0100","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:106","title":"Build a Categorical Index Column from a String Column"},{"user":"anonymous","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala","title":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1549563765795_566175690","id":"20190207-192245_1759718855","dateCreated":"2019-02-07T19:22:45+0100","status":"READY","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:755","text":"import org.apache.spark.ml.linalg.Vectors\nimport org.apache.spark.ml.feature.VectorAssembler\n\nindexed.columns\n\nval assembler = (new VectorAssembler()\n    .setInputCols(Array(\"Age\", \"Tonnage\", \"passengers\", \"length\", \"cabins\", \"passenger_density\", \"cruise_cat\"))\n    .setOutputCol(\"features\"))\n    \nval output = assembler.transform(indexed)\n","dateUpdated":"2019-02-07T19:31:39+0100","title":"Build Feature Vector of All Available Columns"},{"user":"anonymous","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala","title":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1549564223821_1766651408","id":"20190207-193023_1528883980","dateCreated":"2019-02-07T19:30:23+0100","status":"READY","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:859","dateUpdated":"2019-02-07T19:39:29+0100","title":"Build Final Feature Vector to Use in Model","text":"output.select(\"features\", \"crew\").show()\r\n\r\nval final_data = output.select(\"features\", \"crew\")"},{"user":"anonymous","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala","title":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1549564590281_-581378943","id":"20190207-193630_204424624","dateCreated":"2019-02-07T19:36:30+0100","status":"READY","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:949","dateUpdated":"2019-02-07T19:58:44+0100","title":"Split Data Into Training/Test Set","text":"val Array(trainingData, testData) = final_data.randomSplit(Array(0.7, 0.3))"},{"user":"anonymous","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala","title":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1549564746695_1180161018","id":"20190207-193906_1709856092","dateCreated":"2019-02-07T19:39:06+0100","status":"READY","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:1033","dateUpdated":"2019-02-07T19:52:21+0100","title":"Build and Fit a Model","text":"import org.apache.spark.ml.regression.LinearRegression\n\nval lr = new LinearRegression().setLabelCol(\"crew\")\nval lrModel = lr.fit(train_data)\n\nprint(\"Coefficients: {} Intercept: {}\".format(lrModel.coefficients, lrModel.intercept))\n\nval test_results = lrModel.evaluate(test_data)\n\nprint(\"MSE: {}\".format(test_results.meanSquaredError))\n"}],"name":"scigilitytraining/LinearRegressionExercise","id":"2E5UQNHBE","noteParams":{},"noteForms":{},"angularObjects":{"md:shared_process":[],"sh:shared_process":[],"spark:shared_process":[]},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}